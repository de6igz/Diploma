// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
)

type serverApp struct {
	svc   interfaces.App
	getMe AppGetMe
}

type MiddlewareSetApp interface {
	Wrap(m MiddlewareApp)
	WrapGetMe(m MiddlewareAppGetMe)

	WithMetrics()
	WithLog()
}

func newServerApp(svc interfaces.App) *serverApp {
	return &serverApp{
		getMe: svc.GetMe,
		svc:   svc,
	}
}

func (srv *serverApp) Wrap(m MiddlewareApp) {
	srv.svc = m(srv.svc)
	srv.getMe = srv.svc.GetMe
}

func (srv *serverApp) GetMe(ctx context.Context) (resp v1.MeResponse, err error) {
	return srv.getMe(ctx)
}

func (srv *serverApp) WrapGetMe(m MiddlewareAppGetMe) {
	srv.getMe = m(srv.getMe)
}

func (srv *serverApp) WithMetrics() {
	srv.Wrap(metricsMiddlewareApp)
}

func (srv *serverApp) WithLog() {
	srv.Wrap(loggerMiddlewareApp())
}
