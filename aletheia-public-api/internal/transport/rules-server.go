// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
)

type serverRules struct {
	svc               interfaces.Rules
	getRules          RulesGetRules
	getRuleByID       RulesGetRuleByID
	getAvailableRules RulesGetAvailableRules
	deleteRuleByID    RulesDeleteRuleByID
	createRule        RulesCreateRule
	updateRuleById    RulesUpdateRuleById
}

type MiddlewareSetRules interface {
	Wrap(m MiddlewareRules)
	WrapGetRules(m MiddlewareRulesGetRules)
	WrapGetRuleByID(m MiddlewareRulesGetRuleByID)
	WrapGetAvailableRules(m MiddlewareRulesGetAvailableRules)
	WrapDeleteRuleByID(m MiddlewareRulesDeleteRuleByID)
	WrapCreateRule(m MiddlewareRulesCreateRule)
	WrapUpdateRuleById(m MiddlewareRulesUpdateRuleById)

	WithMetrics()
	WithLog()
}

func newServerRules(svc interfaces.Rules) *serverRules {
	return &serverRules{
		createRule:        svc.CreateRule,
		deleteRuleByID:    svc.DeleteRuleByID,
		getAvailableRules: svc.GetAvailableRules,
		getRuleByID:       svc.GetRuleByID,
		getRules:          svc.GetRules,
		svc:               svc,
		updateRuleById:    svc.UpdateRuleById,
	}
}

func (srv *serverRules) Wrap(m MiddlewareRules) {
	srv.svc = m(srv.svc)
	srv.getRules = srv.svc.GetRules
	srv.getRuleByID = srv.svc.GetRuleByID
	srv.getAvailableRules = srv.svc.GetAvailableRules
	srv.deleteRuleByID = srv.svc.DeleteRuleByID
	srv.createRule = srv.svc.CreateRule
	srv.updateRuleById = srv.svc.UpdateRuleById
}

func (srv *serverRules) GetRules(ctx context.Context, userId int64) (items v1.RulesResponse, err error) {
	return srv.getRules(ctx, userId)
}

func (srv *serverRules) GetRuleByID(ctx context.Context, userId int64, ruleId string, ruleType string) (rule *v1.RuleDetailResponse, err error) {
	return srv.getRuleByID(ctx, userId, ruleId, ruleType)
}

func (srv *serverRules) GetAvailableRules(ctx context.Context, userId int64) (items v1.RulesResponse, err error) {
	return srv.getAvailableRules(ctx, userId)
}

func (srv *serverRules) DeleteRuleByID(ctx context.Context, userId int64, req v1.DeleteRuleRequest) (status bool, err error) {
	return srv.deleteRuleByID(ctx, userId, req)
}

func (srv *serverRules) CreateRule(ctx context.Context, userId int64, request v1.CreateRuleRequest) (status bool, err error) {
	return srv.createRule(ctx, userId, request)
}

func (srv *serverRules) UpdateRuleById(ctx context.Context, userId int64, request v1.UpdateRuleRequest) (status bool, err error) {
	return srv.updateRuleById(ctx, userId, request)
}

func (srv *serverRules) WrapGetRules(m MiddlewareRulesGetRules) {
	srv.getRules = m(srv.getRules)
}

func (srv *serverRules) WrapGetRuleByID(m MiddlewareRulesGetRuleByID) {
	srv.getRuleByID = m(srv.getRuleByID)
}

func (srv *serverRules) WrapGetAvailableRules(m MiddlewareRulesGetAvailableRules) {
	srv.getAvailableRules = m(srv.getAvailableRules)
}

func (srv *serverRules) WrapDeleteRuleByID(m MiddlewareRulesDeleteRuleByID) {
	srv.deleteRuleByID = m(srv.deleteRuleByID)
}

func (srv *serverRules) WrapCreateRule(m MiddlewareRulesCreateRule) {
	srv.createRule = m(srv.createRule)
}

func (srv *serverRules) WrapUpdateRuleById(m MiddlewareRulesUpdateRuleById) {
	srv.updateRuleById = m(srv.updateRuleById)
}

func (srv *serverRules) WithMetrics() {
	srv.Wrap(metricsMiddlewareRules)
}

func (srv *serverRules) WithLog() {
	srv.Wrap(loggerMiddlewareRules())
}
