// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
)

type metricsProjects struct {
	next            interfaces.Projects
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareProjects(next interfaces.Projects) interfaces.Projects {
	return &metricsProjects{
		next:            next,
		requestCount:    RequestCount.With("service", "Projects"),
		requestCountAll: RequestCountAll.With("service", "Projects"),
		requestLatency:  RequestLatency.With("service", "Projects"),
	}
}

func (m metricsProjects) GetProjects(ctx context.Context, userId int64) (items v1.ProjectsResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getProjects", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getProjects", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getProjects").Add(1)

	return m.next.GetProjects(ctx, userId)
}

func (m metricsProjects) GetProjectByID(ctx context.Context, projectID string, userId int64) (project v1.ProjectDetailResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getProjectByID", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getProjectByID", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getProjectByID").Add(1)

	return m.next.GetProjectByID(ctx, projectID, userId)
}

func (m metricsProjects) DeleteProjectByID(ctx context.Context, projectID string, userId int64) (status bool, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "deleteProjectByID", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "deleteProjectByID", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "deleteProjectByID").Add(1)

	return m.next.DeleteProjectByID(ctx, projectID, userId)
}

func (m metricsProjects) CreateProject(ctx context.Context, project *v1.CreateProjectRequest, userId int64) (status bool, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "createProject", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "createProject", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "createProject").Add(1)

	return m.next.CreateProject(ctx, project, userId)
}

func (m metricsProjects) UpdateProject(ctx context.Context, project *v1.UpdateProjectRequest, projectID string, userId int64) (status bool, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "updateProject", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "updateProject", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "updateProject").Add(1)

	return m.next.UpdateProject(ctx, project, projectID, userId)
}
