// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"strconv"

	"github.com/gofiber/fiber/v2"
)

func (http *httpProjects) getProjects(ctx context.Context, request requestProjectsGetProjects) (response responseProjectsGetProjects, err error) {

	response.Items, err = http.svc.GetProjects(ctx, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpProjects) serveGetProjects(ctx *fiber.Ctx) (err error) {

	var request requestProjectsGetProjects

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseProjectsGetProjects
	if response, err = http.getProjects(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpProjects) getProjectByID(ctx context.Context, request requestProjectsGetProjectByID) (response responseProjectsGetProjectByID, err error) {

	response.Project, err = http.svc.GetProjectByID(ctx, request.ProjectID, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpProjects) serveGetProjectByID(ctx *fiber.Ctx) (err error) {

	var request requestProjectsGetProjectByID

	if _projectID := ctx.Params("projectID"); _projectID != "" {
		var projectID string
		projectID = _projectID
		request.ProjectID = projectID
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseProjectsGetProjectByID
	if response, err = http.getProjectByID(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpProjects) deleteProjectByID(ctx context.Context, request requestProjectsDeleteProjectByID) (response responseProjectsDeleteProjectByID, err error) {

	response.Status, err = http.svc.DeleteProjectByID(ctx, request.ProjectID, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpProjects) serveDeleteProjectByID(ctx *fiber.Ctx) (err error) {

	var request requestProjectsDeleteProjectByID

	if _projectID := ctx.Params("projectID"); _projectID != "" {
		var projectID string
		projectID = _projectID
		request.ProjectID = projectID
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseProjectsDeleteProjectByID
	if response, err = http.deleteProjectByID(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpProjects) createProject(ctx context.Context, request requestProjectsCreateProject) (response responseProjectsCreateProject, err error) {

	response.Status, err = http.svc.CreateProject(ctx, request.Project, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpProjects) serveCreateProject(ctx *fiber.Ctx) (err error) {

	var request requestProjectsCreateProject
	if err = ctx.BodyParser(&request); err != nil {
		ctx.Response().SetStatusCode(fiber.StatusBadRequest)
		_, err = ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseProjectsCreateProject
	if response, err = http.createProject(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpProjects) updateProject(ctx context.Context, request requestProjectsUpdateProject) (response responseProjectsUpdateProject, err error) {

	response.Status, err = http.svc.UpdateProject(ctx, request.Project, request.ProjectID, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpProjects) serveUpdateProject(ctx *fiber.Ctx) (err error) {

	var request requestProjectsUpdateProject
	if err = ctx.BodyParser(&request); err != nil {
		ctx.Response().SetStatusCode(fiber.StatusBadRequest)
		_, err = ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	if _projectID := ctx.Params("projectID"); _projectID != "" {
		var projectID string
		projectID = _projectID
		request.ProjectID = projectID
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseProjectsUpdateProject
	if response, err = http.updateProject(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
