// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
)

type serverProjects struct {
	svc               interfaces.Projects
	getProjects       ProjectsGetProjects
	getProjectByID    ProjectsGetProjectByID
	deleteProjectByID ProjectsDeleteProjectByID
	createProject     ProjectsCreateProject
	updateProject     ProjectsUpdateProject
}

type MiddlewareSetProjects interface {
	Wrap(m MiddlewareProjects)
	WrapGetProjects(m MiddlewareProjectsGetProjects)
	WrapGetProjectByID(m MiddlewareProjectsGetProjectByID)
	WrapDeleteProjectByID(m MiddlewareProjectsDeleteProjectByID)
	WrapCreateProject(m MiddlewareProjectsCreateProject)
	WrapUpdateProject(m MiddlewareProjectsUpdateProject)

	WithMetrics()
	WithLog()
}

func newServerProjects(svc interfaces.Projects) *serverProjects {
	return &serverProjects{
		createProject:     svc.CreateProject,
		deleteProjectByID: svc.DeleteProjectByID,
		getProjectByID:    svc.GetProjectByID,
		getProjects:       svc.GetProjects,
		svc:               svc,
		updateProject:     svc.UpdateProject,
	}
}

func (srv *serverProjects) Wrap(m MiddlewareProjects) {
	srv.svc = m(srv.svc)
	srv.getProjects = srv.svc.GetProjects
	srv.getProjectByID = srv.svc.GetProjectByID
	srv.deleteProjectByID = srv.svc.DeleteProjectByID
	srv.createProject = srv.svc.CreateProject
	srv.updateProject = srv.svc.UpdateProject
}

func (srv *serverProjects) GetProjects(ctx context.Context, userId int64) (items v1.ProjectsResponse, err error) {
	return srv.getProjects(ctx, userId)
}

func (srv *serverProjects) GetProjectByID(ctx context.Context, projectID string, userId int64) (project v1.ProjectDetailResponse, err error) {
	return srv.getProjectByID(ctx, projectID, userId)
}

func (srv *serverProjects) DeleteProjectByID(ctx context.Context, projectID string, userId int64) (status bool, err error) {
	return srv.deleteProjectByID(ctx, projectID, userId)
}

func (srv *serverProjects) CreateProject(ctx context.Context, project *v1.CreateProjectRequest, userId int64) (status bool, err error) {
	return srv.createProject(ctx, project, userId)
}

func (srv *serverProjects) UpdateProject(ctx context.Context, project *v1.UpdateProjectRequest, projectID string, userId int64) (status bool, err error) {
	return srv.updateProject(ctx, project, projectID, userId)
}

func (srv *serverProjects) WrapGetProjects(m MiddlewareProjectsGetProjects) {
	srv.getProjects = m(srv.getProjects)
}

func (srv *serverProjects) WrapGetProjectByID(m MiddlewareProjectsGetProjectByID) {
	srv.getProjectByID = m(srv.getProjectByID)
}

func (srv *serverProjects) WrapDeleteProjectByID(m MiddlewareProjectsDeleteProjectByID) {
	srv.deleteProjectByID = m(srv.deleteProjectByID)
}

func (srv *serverProjects) WrapCreateProject(m MiddlewareProjectsCreateProject) {
	srv.createProject = m(srv.createProject)
}

func (srv *serverProjects) WrapUpdateProject(m MiddlewareProjectsUpdateProject) {
	srv.updateProject = m(srv.updateProject)
}

func (srv *serverProjects) WithMetrics() {
	srv.Wrap(metricsMiddlewareProjects)
}

func (srv *serverProjects) WithLog() {
	srv.Wrap(loggerMiddlewareProjects())
}
