// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
)

type metricsEvents struct {
	next            interfaces.Events
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareEvents(next interfaces.Events) interfaces.Events {
	return &metricsEvents{
		next:            next,
		requestCount:    RequestCount.With("service", "Events"),
		requestCountAll: RequestCountAll.With("service", "Events"),
		requestLatency:  RequestLatency.With("service", "Events"),
	}
}

func (m metricsEvents) GetEvents(ctx context.Context, pastHours int, userId int64) (items v1.EventsResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getEvents", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getEvents", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getEvents").Add(1)

	return m.next.GetEvents(ctx, pastHours, userId)
}

func (m metricsEvents) GetEventByID(ctx context.Context, eventId string, userId int64) (resp v1.EventDetailResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getEventByID", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getEventByID", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getEventByID").Add(1)

	return m.next.GetEventByID(ctx, eventId, userId)
}

func (m metricsEvents) GetMostRecentEvent(ctx context.Context, userId int64, eventType string) (resp v1.EventDetailResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getMostRecentEvent", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getMostRecentEvent", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getMostRecentEvent").Add(1)

	return m.next.GetMostRecentEvent(ctx, userId, eventType)
}

func (m metricsEvents) GetEventsByType(ctx context.Context, eventType string, userId int64) (resp v1.EventsByEventTypeResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getEventsByType", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getEventsByType", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getEventsByType").Add(1)

	return m.next.GetEventsByType(ctx, eventType, userId)
}
