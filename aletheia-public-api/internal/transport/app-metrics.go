// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
)

type metricsApp struct {
	next            interfaces.App
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareApp(next interfaces.App) interfaces.App {
	return &metricsApp{
		next:            next,
		requestCount:    RequestCount.With("service", "App"),
		requestCountAll: RequestCountAll.With("service", "App"),
		requestLatency:  RequestLatency.With("service", "App"),
	}
}

func (m metricsApp) GetMe(ctx context.Context) (resp v1.MeResponse, err error) {

	defer func(_begin time.Time) {
		m.requestCount.With("method", "getMe", "success", fmt.Sprint(err == nil)).Add(1)
		m.requestLatency.With("method", "getMe", "success", fmt.Sprint(err == nil)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	m.requestCountAll.With("method", "getMe").Add(1)

	return m.next.GetMe(ctx)
}
