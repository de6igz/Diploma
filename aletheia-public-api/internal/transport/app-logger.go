// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"aletheia-public-api/internal/transport/viewer"
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

type loggerApp struct {
	next interfaces.App
}

func loggerMiddlewareApp() MiddlewareApp {
	return func(next interfaces.App) interfaces.App {
		return &loggerApp{next: next}
	}
}

func (m loggerApp) GetMe(ctx context.Context) (resp v1.MeResponse, err error) {
	logger := log.Ctx(ctx).With().Str("service", "App").Str("method", "getMe").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "app.getMe",
				"request":  viewer.Sprintf("%+v", requestAppGetMe{}),
				"response": viewer.Sprintf("%+v", responseAppGetMe{Resp: resp}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getMe")
			return
		}
		logger.Info().Func(logHandle).Msg("call getMe")
	}(time.Now())
	return m.next.GetMe(ctx)
}
