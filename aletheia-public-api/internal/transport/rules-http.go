// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"

	"github.com/gofiber/fiber/v2"
)

type httpRules struct {
	errorHandler     ErrorHandler
	maxBatchSize     int
	maxParallelBatch int
	svc              *serverRules
	base             interfaces.Rules
}

func NewRules(svcRules interfaces.Rules) (srv *httpRules) {

	srv = &httpRules{
		base: svcRules,
		svc:  newServerRules(svcRules),
	}
	return
}

func (http *httpRules) Service() *serverRules {
	return http.svc
}

func (http *httpRules) WithLog() *httpRules {
	http.svc.WithLog()
	return http
}

func (http *httpRules) WithMetrics() *httpRules {
	http.svc.WithMetrics()
	return http
}

func (http *httpRules) WithErrorHandler(handler ErrorHandler) *httpRules {
	http.errorHandler = handler
	return http
}

func (http *httpRules) SetRoutes(route *fiber.App) {
	route.Get("/v1/rules", http.serveGetRules)
	route.Get("/v1/rule/byId", http.serveGetRuleByID)
	route.Get("/v1/rules/available", http.serveGetAvailableRules)
	route.Delete("/v1/rules", http.serveDeleteRuleByID)
	route.Post("/v1/rules/create", http.serveCreateRule)
	route.Put("/v1/rules/update", http.serveUpdateRuleById)
}
