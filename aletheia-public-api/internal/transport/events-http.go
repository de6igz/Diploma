// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"

	"github.com/gofiber/fiber/v2"
)

type httpEvents struct {
	errorHandler     ErrorHandler
	maxBatchSize     int
	maxParallelBatch int
	svc              *serverEvents
	base             interfaces.Events
}

func NewEvents(svcEvents interfaces.Events) (srv *httpEvents) {

	srv = &httpEvents{
		base: svcEvents,
		svc:  newServerEvents(svcEvents),
	}
	return
}

func (http *httpEvents) Service() *serverEvents {
	return http.svc
}

func (http *httpEvents) WithLog() *httpEvents {
	http.svc.WithLog()
	return http
}

func (http *httpEvents) WithMetrics() *httpEvents {
	http.svc.WithMetrics()
	return http
}

func (http *httpEvents) WithErrorHandler(handler ErrorHandler) *httpEvents {
	http.errorHandler = handler
	return http
}

func (http *httpEvents) SetRoutes(route *fiber.App) {
	route.Get("/v1/events", http.serveGetEvents)
	route.Get("/v1/event", http.serveGetEventByID)
	route.Get("/v1/event/recent", http.serveGetMostRecentEvent)
	route.Get("/v1/events_by_event_type", http.serveGetEventsByType)
}
