// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
)

type serverEvents struct {
	svc                interfaces.Events
	getEvents          EventsGetEvents
	getEventByID       EventsGetEventByID
	getMostRecentEvent EventsGetMostRecentEvent
	getEventsByType    EventsGetEventsByType
}

type MiddlewareSetEvents interface {
	Wrap(m MiddlewareEvents)
	WrapGetEvents(m MiddlewareEventsGetEvents)
	WrapGetEventByID(m MiddlewareEventsGetEventByID)
	WrapGetMostRecentEvent(m MiddlewareEventsGetMostRecentEvent)
	WrapGetEventsByType(m MiddlewareEventsGetEventsByType)

	WithMetrics()
	WithLog()
}

func newServerEvents(svc interfaces.Events) *serverEvents {
	return &serverEvents{
		getEventByID:       svc.GetEventByID,
		getEvents:          svc.GetEvents,
		getEventsByType:    svc.GetEventsByType,
		getMostRecentEvent: svc.GetMostRecentEvent,
		svc:                svc,
	}
}

func (srv *serverEvents) Wrap(m MiddlewareEvents) {
	srv.svc = m(srv.svc)
	srv.getEvents = srv.svc.GetEvents
	srv.getEventByID = srv.svc.GetEventByID
	srv.getMostRecentEvent = srv.svc.GetMostRecentEvent
	srv.getEventsByType = srv.svc.GetEventsByType
}

func (srv *serverEvents) GetEvents(ctx context.Context, pastHours int, userId int64) (items v1.EventsResponse, err error) {
	return srv.getEvents(ctx, pastHours, userId)
}

func (srv *serverEvents) GetEventByID(ctx context.Context, eventId string, userId int64) (resp v1.EventDetailResponse, err error) {
	return srv.getEventByID(ctx, eventId, userId)
}

func (srv *serverEvents) GetMostRecentEvent(ctx context.Context, userId int64, eventType string) (resp v1.EventDetailResponse, err error) {
	return srv.getMostRecentEvent(ctx, userId, eventType)
}

func (srv *serverEvents) GetEventsByType(ctx context.Context, eventType string, userId int64) (resp v1.EventsByEventTypeResponse, err error) {
	return srv.getEventsByType(ctx, eventType, userId)
}

func (srv *serverEvents) WrapGetEvents(m MiddlewareEventsGetEvents) {
	srv.getEvents = m(srv.getEvents)
}

func (srv *serverEvents) WrapGetEventByID(m MiddlewareEventsGetEventByID) {
	srv.getEventByID = m(srv.getEventByID)
}

func (srv *serverEvents) WrapGetMostRecentEvent(m MiddlewareEventsGetMostRecentEvent) {
	srv.getMostRecentEvent = m(srv.getMostRecentEvent)
}

func (srv *serverEvents) WrapGetEventsByType(m MiddlewareEventsGetEventsByType) {
	srv.getEventsByType = m(srv.getEventsByType)
}

func (srv *serverEvents) WithMetrics() {
	srv.Wrap(metricsMiddlewareEvents)
}

func (srv *serverEvents) WithLog() {
	srv.Wrap(loggerMiddlewareEvents())
}
