// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"strconv"

	"github.com/gofiber/fiber/v2"
)

func (http *httpEvents) getEvents(ctx context.Context, request requestEventsGetEvents) (response responseEventsGetEvents, err error) {

	response.Items, err = http.svc.GetEvents(ctx, request.PastHours, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpEvents) serveGetEvents(ctx *fiber.Ctx) (err error) {

	var request requestEventsGetEvents

	if _pastHours := ctx.Query("pastHours"); _pastHours != "" {
		var pastHours int
		pastHours, err = strconv.Atoi(_pastHours)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "url arguments could not be decoded: "+err.Error())
		}
		request.PastHours = pastHours
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseEventsGetEvents
	if response, err = http.getEvents(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpEvents) getEventByID(ctx context.Context, request requestEventsGetEventByID) (response responseEventsGetEventByID, err error) {

	response.Resp, err = http.svc.GetEventByID(ctx, request.EventId, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpEvents) serveGetEventByID(ctx *fiber.Ctx) (err error) {

	var request requestEventsGetEventByID

	if _eventId := ctx.Query("eventId"); _eventId != "" {
		var eventId string
		eventId = _eventId
		request.EventId = eventId
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseEventsGetEventByID
	if response, err = http.getEventByID(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpEvents) getMostRecentEvent(ctx context.Context, request requestEventsGetMostRecentEvent) (response responseEventsGetMostRecentEvent, err error) {

	response.Resp, err = http.svc.GetMostRecentEvent(ctx, request.UserId, request.EventType)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpEvents) serveGetMostRecentEvent(ctx *fiber.Ctx) (err error) {

	var request requestEventsGetMostRecentEvent

	if _eventType := ctx.Query("eventType"); _eventType != "" {
		var eventType string
		eventType = _eventType
		request.EventType = eventType
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseEventsGetMostRecentEvent
	if response, err = http.getMostRecentEvent(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
func (http *httpEvents) getEventsByType(ctx context.Context, request requestEventsGetEventsByType) (response responseEventsGetEventsByType, err error) {

	response.Resp, err = http.svc.GetEventsByType(ctx, request.EventType, request.UserId)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
	}
	return
}
func (http *httpEvents) serveGetEventsByType(ctx *fiber.Ctx) (err error) {

	var request requestEventsGetEventsByType

	if _eventType := ctx.Query("eventType"); _eventType != "" {
		var eventType string
		eventType = _eventType
		request.EventType = eventType
	}

	if _userId := string(ctx.Request().Header.Peek("X-User-Id")); _userId != "" {
		var userId int64
		userId, err = strconv.ParseInt(_userId, 10, 64)
		if err != nil {
			ctx.Status(fiber.StatusBadRequest)
			return sendResponse(ctx, "http header could not be decoded: "+err.Error())
		}
		request.UserId = userId
	}

	var response responseEventsGetEventsByType
	if response, err = http.getEventsByType(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}

		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
