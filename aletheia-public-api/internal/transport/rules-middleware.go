// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"aletheia-public-api/interfaces"
	v1 "aletheia-public-api/interfaces/types/v1"
	"context"
)

type RulesGetRules func(ctx context.Context, userId int64) (items v1.RulesResponse, err error)
type RulesGetRuleByID func(ctx context.Context, userId int64, ruleId string, ruleType string) (rule *v1.RuleDetailResponse, err error)
type RulesGetAvailableRules func(ctx context.Context, userId int64) (items v1.RulesResponse, err error)
type RulesDeleteRuleByID func(ctx context.Context, userId int64, req v1.DeleteRuleRequest) (status bool, err error)
type RulesCreateRule func(ctx context.Context, userId int64, request v1.CreateRuleRequest) (status bool, err error)
type RulesUpdateRuleById func(ctx context.Context, userId int64, request v1.UpdateRuleRequest) (status bool, err error)

type MiddlewareRules func(next interfaces.Rules) interfaces.Rules

type MiddlewareRulesGetRules func(next RulesGetRules) RulesGetRules
type MiddlewareRulesGetRuleByID func(next RulesGetRuleByID) RulesGetRuleByID
type MiddlewareRulesGetAvailableRules func(next RulesGetAvailableRules) RulesGetAvailableRules
type MiddlewareRulesDeleteRuleByID func(next RulesDeleteRuleByID) RulesDeleteRuleByID
type MiddlewareRulesCreateRule func(next RulesCreateRule) RulesCreateRule
type MiddlewareRulesUpdateRuleById func(next RulesUpdateRuleById) RulesUpdateRuleById
